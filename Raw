const ver = "V3.0.5";

// Configurações de atraso reduzidas
const featureConfigs = {
    initialDelay: 1000, // Reduzi de 3000 para 1000
    subsequentDelays: [150, 500, 250, 1000] // Reduzi todos os tempos
};

// Configurações das funcionalidades
window.features = {
    autoAnswer: false,
    questionSpoof: true
};

const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

const playAudio = url => {
    new Audio(url).play();
};

function sendToast(text, duration = 3000) { // Duração reduzida
    Toastify({
        text: text,
        duration: duration,
        gravity: 'bottom',
        position: "center",
        stopOnFocus: true,
        style: { background: "#000", color: "#fff", padding: '10px 20px', borderRadius: '5px' }
    }).showToast();
}

function findAndClickByClass(className) {
    const element = document.getElementsByClassName(className)[0];
    if (element) {
        element.click();
        if (element.textContent === 'Mostrar resumo') {
            sendToast("🎉 Exercício concluído!", 2000);
            playAudio('https://r2.e-z.host/4d0a0bea-60f8-44d6-9e74-3032a64a9f32/4x5g14gj.wav');
        }
    }
    return !!element;
}

function spoofQuestion() {
    const phrases = [
        "🎮💣 Games Destroyer On Top[Discord](https://discord.gg/gamesdest)!",
        "❓ Made by [@iUnknownBr](https://guns.lol/iunknownbr).",
        "🏂 Made by [Snow](https://guns.lol/imsnow)"
    ];

    const originalFetch = window.fetch;
    window.fetch = async function (input, init) {
        let body;
        if (input instanceof Request) body = await input.clone().text();
        else if (init && init.body) body = init.body;

        const originalResponse = await originalFetch.apply(this, arguments);
        const clonedResponse = originalResponse.clone();

        try {
            const responseBody = await clonedResponse.text();
            let responseObj = JSON.parse(responseBody);

            if (responseObj?.data?.assessmentItem?.item?.itemData) {
                let itemData = JSON.parse(responseObj.data.assessmentItem.item.itemData);
                
                itemData.answerArea = { "calculator": false };
                itemData.question.content = phrases[Math.floor(Math.random() * phrases.length)] + `[[☃ radio 1]]`;
                itemData.question.widgets = {
                    "radio 1": {
                        options: {
                            choices: [
                                { content: "Resposta correta.", correct: true },
                                { content: "Resposta Errada.", correct: false }
                            ]
                        }
                    }
                };

                responseObj.data.assessmentItem.item.itemData = JSON.stringify(itemData);
                sendToast("🔓 Questão Bypassed.", 800);

                return new Response(JSON.stringify(responseObj), {
                    status: originalResponse.status,
                    statusText: originalResponse.statusText,
                    headers: originalResponse.headers
                });
            }
        } catch (e) {
            console.error(e);
        }

        return originalResponse;
    };
}

function autoAnswer() {
    (async () => {
        const baseClasses = ["_s6zfc1u", "_ssxvf9l", "_4i5p5ae", "_1r8cd7xe", "_1yok8f4"];
        while (true) {
            if (window.features.autoAnswer && window.features.questionSpoof) {
                await delay(featureConfigs.initialDelay);
                for (let i = 0; i < baseClasses.length; i++) {
                    if (findAndClickByClass(baseClasses[i]) && i < baseClasses.length - 1) {
                        await delay(featureConfigs.subsequentDelays[i % featureConfigs.subsequentDelays.length]);
                    }
                }
            } else {
                await delay(500);
            }
        }
    })();
}

spoofQuestion();
autoAnswer();
